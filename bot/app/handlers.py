import os
from datetime import datetime
from pathlib import Path

from aiogram import Bot, Router
from aiogram.filters import Command, CommandStart
from aiogram.types import BufferedInputFile, Message
from loguru import logger
from services import (
    clear_user_files,
    create_user_archive,
    create_user_archive_by_date,
    format_file_size,
    get_user_files_stats,
    save_user_files,
)

router = Router()


# MARK: Start
@router.message(CommandStart())
async def start_command_handler(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.

    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö.
    """
    if message.from_user is None:
        logger.error("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return

    user_id = message.from_user.id
    username = (
        message.from_user.username or message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    )

    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username})")

    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {username}!\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —É–º–µ–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ:\n"
        "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç –≤–∞—Å —Ñ–∞–π–ª—ã –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
        "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º zip-–∞—Ä—Ö–∏–≤ —Å –≤–∞—à–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏\n"
        "‚Ä¢ –£–¥–∞–ª—è—Ç—å –≤—Å–µ –≤–∞—à–∏ —Ñ–∞–π–ª—ã –∫–æ–º–∞–Ω–¥–æ–π /clear\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥."
    )

    await message.answer(
        welcome_text,
    )


# MARK: Archive
@router.message(Command("archive"))
async def archive_command_handler(message: Message, bot: Bot) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /archive –∏ /archive YYYY-MM-DD.

    –°–æ–∑–¥–∞—ë—Ç zip-–∞—Ä—Ö–∏–≤ —Å–æ –≤—Å–µ–º–∏ —Ñ–∞–π–ª–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å —Ñ–∞–π–ª–∞–º–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É.
    """
    if message.from_user is None:
        logger.error("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return

    user_id = message.from_user.id
    username = (
        message.from_user.username or message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    )

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ –∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if message.text is None:
        logger.error("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞")
        return

    command_text = message.text.strip()
    parts = command_text.split()

    if len(parts) == 2:
        # –ö–æ–º–∞–Ω–¥–∞ —Å –¥–∞—Ç–æ–π: /archive YYYY-MM-DD
        target_date = parts[1]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
        try:
            datetime.strptime(target_date, "%Y-%m-%d")
        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2024-01-15)"
            )
            return

        logger.debug(
            f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /archive {target_date} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username})"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞
        status_message = await message.answer(
            f"üì¶ –°–æ–∑–¥–∞—é –∞—Ä—Ö–∏–≤ —Å —Ñ–∞–π–ª–∞–º–∏ –∑–∞ {target_date}..."
        )

        try:
            # –°–æ–∑–¥–∞—ë–º –∞—Ä—Ö–∏–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
            archive_path = await create_user_archive_by_date(
                user_id=user_id,
                target_date=target_date,
            )

            if archive_path is None:
                await status_message.edit_text(
                    f"üìÅ –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞ {target_date}."
                )
                return

            # –ß–∏—Ç–∞–µ–º –∞—Ä—Ö–∏–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            archive_file = Path(archive_path)
            with open(archive_file, "rb") as file:
                archive_data = file.read()

            # –°–æ–∑–¥–∞—ë–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∞—Ä—Ö–∏–≤–∞
            archive_filename = f"archive_{username}_{user_id}_{target_date}.zip"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Ä—Ö–∏–≤ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
            document = BufferedInputFile(archive_data, filename=archive_filename)
            await bot.send_document(
                chat_id=message.chat.id,
                document=document,
                caption=f"üì¶ –í–∞—à –∞—Ä—Ö–∏–≤ —Å —Ñ–∞–π–ª–∞–º–∏ –∑–∞ {target_date} –≥–æ—Ç–æ–≤!",
            )

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
            await status_message.delete()

            logger.info(f"–ê—Ä—Ö–∏–≤ –∑–∞ {target_date} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—Ä—Ö–∏–≤–∞ –∑–∞ {target_date} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}"
            )
            await status_message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∞—Ä—Ö–∏–≤–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if "archive_path" in locals() and archive_path:
                try:
                    os.unlink(archive_path)
                    logger.debug(f"–£–¥–∞–ª—ë–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤ {archive_path}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞: {e}")

    else:
        # –û–±—ã—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /archive –±–µ–∑ –¥–∞—Ç—ã
        logger.debug(
            f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /archive –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username})"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞
        status_message = await message.answer("üì¶ –°–æ–∑–¥–∞—é –∞—Ä—Ö–∏–≤ —Å –≤–∞—à–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏...")

        try:
            # –°–æ–∑–¥–∞—ë–º –∞—Ä—Ö–∏–≤
            archive_path = await create_user_archive(user_id)

            if archive_path is None:
                await status_message.edit_text(
                    "üìÅ –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞."
                )
                return

            # –ß–∏—Ç–∞–µ–º –∞—Ä—Ö–∏–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            archive_file = Path(archive_path)
            with open(archive_file, "rb") as file:
                archive_data = file.read()

            # –°–æ–∑–¥–∞—ë–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∞—Ä—Ö–∏–≤–∞
            archive_filename = f"archive_{username}_{user_id}.zip"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Ä—Ö–∏–≤ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
            document = BufferedInputFile(archive_data, filename=archive_filename)
            await bot.send_document(
                chat_id=message.chat.id,
                document=document,
                caption="üì¶ –í–∞—à –∞—Ä—Ö–∏–≤ —Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ –≥–æ—Ç–æ–≤!",
            )

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
            await status_message.delete()

            logger.info(f"–ê—Ä—Ö–∏–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—Ä—Ö–∏–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            await status_message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∞—Ä—Ö–∏–≤–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if "archive_path" in locals() and archive_path:
                try:
                    os.unlink(archive_path)
                    logger.debug(f"–£–¥–∞–ª—ë–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤ {archive_path}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞: {e}")


# MARK: Clear
@router.message(Command("clear"))
async def clear_command_handler(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear.

    –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–æ–±—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.
    """
    if message.from_user is None:
        logger.error("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return

    user_id = message.from_user.id
    username = (
        message.from_user.username or message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    )

    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /clear –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username})")

    deleted_count = await clear_user_files(user_id)

    if deleted_count > 0:
        response_text = f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {deleted_count}"
    else:
        response_text = "üìÅ –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."

    await message.answer(response_text)


# MARK: Help
@router.message(Command("help"))
async def help_command_handler(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help.

    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —Å –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ–º.
    """
    if message.from_user is None:
        logger.error("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return

    user_id = message.from_user.id
    username = (
        message.from_user.username or message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    )

    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username})")

    help_text = (
        "üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥\n"
        "/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º\n"
        "/archive - –°–æ–∑–¥–∞—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å zip-–∞—Ä—Ö–∏–≤ —Å–æ –≤—Å–µ–º–∏ –≤–∞—à–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏\n"
        "/archive YYYY-MM-DD - –°–æ–∑–¥–∞—Ç—å –∞—Ä—Ö–∏–≤ —Ç–æ–ª—å–∫–æ —Å —Ñ–∞–π–ª–∞–º–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É\n"
        "/clear - –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –≤–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã\n\n"
        "üìÅ **–†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏:**\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Ñ–∞–π–ª, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ, –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ —Å—Ç–∏–∫–µ—Ä - –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç –µ–≥–æ\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stats –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ñ–∞–π–ª–æ–≤\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /archive –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–∞ —Å –≤–∞—à–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /archive YYYY-MM-DD –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /clear –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"
    )

    await message.answer(help_text, parse_mode="Markdown")


# MARK: Stats
@router.message(Command("stats"))
async def stats_command_handler(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats.

    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º.
    """
    if message.from_user is None:
        logger.error("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return

    user_id = message.from_user.id
    username = (
        message.from_user.username or message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    )

    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /stats –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username})")

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∞–π–ª–æ–≤
    stats = get_user_files_stats(user_id=user_id)

    if stats["total_files"] == 0:
        await message.answer("üìÅ –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_size_formatted = format_file_size(stats["total_size"])
    stats_text = (
        f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–∏—Ö —Ñ–∞–π–ª–æ–≤:**\n\n"
        f"üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {stats['total_files']}\n"
        f"üíæ –û–±—â–∏–π –æ–±—ä—ë–º: {total_size_formatted}\n\n"
        f"üìÖ **–ü–æ –¥–∞—Ç–∞–º:**\n"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–∞—Ç–∞–º
    for date, date_stats in stats["files_by_date"].items():
        date_size_formatted = format_file_size(date_stats["size"])
        stats_text += f"‚Ä¢ {date}: {date_stats['count']} —Ñ–∞–π–ª–æ–≤, {date_size_formatted}\n"

    await message.answer(stats_text, parse_mode="Markdown")


# MARK: Any Message
# –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ—Å–ª–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã
@router.message()
async def message_handler(message: Message, bot: Bot) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.

    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª—ã –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å, –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    if message.from_user is None:
        logger.error("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return

    user_id = message.from_user.id
    username = (
        message.from_user.username or message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    )

    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username})")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    saved_files = await save_user_files(message=message, bot=bot)

    if saved_files:
        files_count = len(saved_files)
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {files_count} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
